// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY gouanlin. DO NOT CHANGE IT.
// </auto-generated>

using System;

namespace Gal.Core {
    public static class StringToArray {
        public static void ToInt32Array(ReadOnlySpan<char> text, ref RefWriter<Int32> writer, char separator = ';') {
            int i;
            while ((i = text.IndexOf(separator)) != -1) {
                writer.Write(i > 0 ? Int32.Parse(text[..i]) : default);
                text = text[++i..];
            }
            writer.Write(text.Length > 0 ? Int32.Parse(text) : default);
        }

        public static Int32[] ToInt32Array(ReadOnlySpan<char> text, char separator = ';') {
            RefWriter<Int32> writer = new(stackalloc Int32[128]);
            try {
                ToInt32Array(text, ref writer, separator);
                return writer.writtenSpan.ToArray();
            } finally {
                writer.Dispose();
            }
        }

        public static void ToInt32Array2D(ReadOnlySpan<char> text, IWriter<Int32[]> writer, char separator1d = ';', char separator2d = '|') {
            RefWriter<Int32> writer1d = new(stackalloc Int32[128]);
            try {
                int i;
                while ((i = text.IndexOf(separator2d)) != -1) {
                    if (i > 0) {
                        ToInt32Array(text[..i], ref writer1d, separator1d);
                        writer.Write(writer1d.writtenSpan.ToArray());
                    } else {
                        writer.Write(Array.Empty<Int32>());
                    }
                    writer1d.Clear();
                    text = text[++i..];
                }
                if (text.Length > 0) {
                    ToInt32Array(text, ref writer1d, separator1d);
                    writer.Write(writer1d.writtenSpan.ToArray());
                } else {
                    writer.Write(Array.Empty<Int32>());
                }
            } finally {
                writer1d.Dispose();
            }
        }

        public static Int32[][] ToInt32Array2D(ReadOnlySpan<char> text, char separator1d = ';', char separator2d = '|') {
            using Writer<Int32[]> writer = new(128);
            ToInt32Array2D(text, writer, separator1d, separator2d);
            return writer.writtenSpan.ToArray();
        }

        public static void ToSingleArray(ReadOnlySpan<char> text, ref RefWriter<Single> writer, char separator = ';') {
            int i;
            while ((i = text.IndexOf(separator)) != -1) {
                writer.Write(i > 0 ? Single.Parse(text[..i]) : default);
                text = text[++i..];
            }
            writer.Write(text.Length > 0 ? Single.Parse(text) : default);
        }

        public static Single[] ToSingleArray(ReadOnlySpan<char> text, char separator = ';') {
            RefWriter<Single> writer = new(stackalloc Single[128]);
            try {
                ToSingleArray(text, ref writer, separator);
                return writer.writtenSpan.ToArray();
            } finally {
                writer.Dispose();
            }
        }

        public static void ToSingleArray2D(ReadOnlySpan<char> text, IWriter<Single[]> writer, char separator1d = ';', char separator2d = '|') {
            RefWriter<Single> writer1d = new(stackalloc Single[128]);
            try {
                int i;
                while ((i = text.IndexOf(separator2d)) != -1) {
                    if (i > 0) {
                        ToSingleArray(text[..i], ref writer1d, separator1d);
                        writer.Write(writer1d.writtenSpan.ToArray());
                    } else {
                        writer.Write(Array.Empty<Single>());
                    }
                    writer1d.Clear();
                    text = text[++i..];
                }
                if (text.Length > 0) {
                    ToSingleArray(text, ref writer1d, separator1d);
                    writer.Write(writer1d.writtenSpan.ToArray());
                } else {
                    writer.Write(Array.Empty<Single>());
                }
            } finally {
                writer1d.Dispose();
            }
        }

        public static Single[][] ToSingleArray2D(ReadOnlySpan<char> text, char separator1d = ';', char separator2d = '|') {
            using Writer<Single[]> writer = new(128);
            ToSingleArray2D(text, writer, separator1d, separator2d);
            return writer.writtenSpan.ToArray();
        }

        public static void ToInt64Array(ReadOnlySpan<char> text, ref RefWriter<Int64> writer, char separator = ';') {
            int i;
            while ((i = text.IndexOf(separator)) != -1) {
                writer.Write(i > 0 ? Int64.Parse(text[..i]) : default);
                text = text[++i..];
            }
            writer.Write(text.Length > 0 ? Int64.Parse(text) : default);
        }

        public static Int64[] ToInt64Array(ReadOnlySpan<char> text, char separator = ';') {
            RefWriter<Int64> writer = new(stackalloc Int64[128]);
            try {
                ToInt64Array(text, ref writer, separator);
                return writer.writtenSpan.ToArray();
            } finally {
                writer.Dispose();
            }
        }

        public static void ToInt64Array2D(ReadOnlySpan<char> text, IWriter<Int64[]> writer, char separator1d = ';', char separator2d = '|') {
            RefWriter<Int64> writer1d = new(stackalloc Int64[128]);
            try {
                int i;
                while ((i = text.IndexOf(separator2d)) != -1) {
                    if (i > 0) {
                        ToInt64Array(text[..i], ref writer1d, separator1d);
                        writer.Write(writer1d.writtenSpan.ToArray());
                    } else {
                        writer.Write(Array.Empty<Int64>());
                    }
                    writer1d.Clear();
                    text = text[++i..];
                }
                if (text.Length > 0) {
                    ToInt64Array(text, ref writer1d, separator1d);
                    writer.Write(writer1d.writtenSpan.ToArray());
                } else {
                    writer.Write(Array.Empty<Int64>());
                }
            } finally {
                writer1d.Dispose();
            }
        }

        public static Int64[][] ToInt64Array2D(ReadOnlySpan<char> text, char separator1d = ';', char separator2d = '|') {
            using Writer<Int64[]> writer = new(128);
            ToInt64Array2D(text, writer, separator1d, separator2d);
            return writer.writtenSpan.ToArray();
        }

        public static void ToDoubleArray(ReadOnlySpan<char> text, ref RefWriter<Double> writer, char separator = ';') {
            int i;
            while ((i = text.IndexOf(separator)) != -1) {
                writer.Write(i > 0 ? Double.Parse(text[..i]) : default);
                text = text[++i..];
            }
            writer.Write(text.Length > 0 ? Double.Parse(text) : default);
        }

        public static Double[] ToDoubleArray(ReadOnlySpan<char> text, char separator = ';') {
            RefWriter<Double> writer = new(stackalloc Double[128]);
            try {
                ToDoubleArray(text, ref writer, separator);
                return writer.writtenSpan.ToArray();
            } finally {
                writer.Dispose();
            }
        }

        public static void ToDoubleArray2D(ReadOnlySpan<char> text, IWriter<Double[]> writer, char separator1d = ';', char separator2d = '|') {
            RefWriter<Double> writer1d = new(stackalloc Double[128]);
            try {
                int i;
                while ((i = text.IndexOf(separator2d)) != -1) {
                    if (i > 0) {
                        ToDoubleArray(text[..i], ref writer1d, separator1d);
                        writer.Write(writer1d.writtenSpan.ToArray());
                    } else {
                        writer.Write(Array.Empty<Double>());
                    }
                    writer1d.Clear();
                    text = text[++i..];
                }
                if (text.Length > 0) {
                    ToDoubleArray(text, ref writer1d, separator1d);
                    writer.Write(writer1d.writtenSpan.ToArray());
                } else {
                    writer.Write(Array.Empty<Double>());
                }
            } finally {
                writer1d.Dispose();
            }
        }

        public static Double[][] ToDoubleArray2D(ReadOnlySpan<char> text, char separator1d = ';', char separator2d = '|') {
            using Writer<Double[]> writer = new(128);
            ToDoubleArray2D(text, writer, separator1d, separator2d);
            return writer.writtenSpan.ToArray();
        }

        public static void ToInt16Array(ReadOnlySpan<char> text, ref RefWriter<Int16> writer, char separator = ';') {
            int i;
            while ((i = text.IndexOf(separator)) != -1) {
                writer.Write(i > 0 ? Int16.Parse(text[..i]) : default);
                text = text[++i..];
            }
            writer.Write(text.Length > 0 ? Int16.Parse(text) : default);
        }

        public static Int16[] ToInt16Array(ReadOnlySpan<char> text, char separator = ';') {
            RefWriter<Int16> writer = new(stackalloc Int16[128]);
            try {
                ToInt16Array(text, ref writer, separator);
                return writer.writtenSpan.ToArray();
            } finally {
                writer.Dispose();
            }
        }

        public static void ToInt16Array2D(ReadOnlySpan<char> text, IWriter<Int16[]> writer, char separator1d = ';', char separator2d = '|') {
            RefWriter<Int16> writer1d = new(stackalloc Int16[128]);
            try {
                int i;
                while ((i = text.IndexOf(separator2d)) != -1) {
                    if (i > 0) {
                        ToInt16Array(text[..i], ref writer1d, separator1d);
                        writer.Write(writer1d.writtenSpan.ToArray());
                    } else {
                        writer.Write(Array.Empty<Int16>());
                    }
                    writer1d.Clear();
                    text = text[++i..];
                }
                if (text.Length > 0) {
                    ToInt16Array(text, ref writer1d, separator1d);
                    writer.Write(writer1d.writtenSpan.ToArray());
                } else {
                    writer.Write(Array.Empty<Int16>());
                }
            } finally {
                writer1d.Dispose();
            }
        }

        public static Int16[][] ToInt16Array2D(ReadOnlySpan<char> text, char separator1d = ';', char separator2d = '|') {
            using Writer<Int16[]> writer = new(128);
            ToInt16Array2D(text, writer, separator1d, separator2d);
            return writer.writtenSpan.ToArray();
        }

        public static void ToUInt16Array(ReadOnlySpan<char> text, ref RefWriter<UInt16> writer, char separator = ';') {
            int i;
            while ((i = text.IndexOf(separator)) != -1) {
                writer.Write(i > 0 ? UInt16.Parse(text[..i]) : default);
                text = text[++i..];
            }
            writer.Write(text.Length > 0 ? UInt16.Parse(text) : default);
        }

        public static UInt16[] ToUInt16Array(ReadOnlySpan<char> text, char separator = ';') {
            RefWriter<UInt16> writer = new(stackalloc UInt16[128]);
            try {
                ToUInt16Array(text, ref writer, separator);
                return writer.writtenSpan.ToArray();
            } finally {
                writer.Dispose();
            }
        }

        public static void ToUInt16Array2D(ReadOnlySpan<char> text, IWriter<UInt16[]> writer, char separator1d = ';', char separator2d = '|') {
            RefWriter<UInt16> writer1d = new(stackalloc UInt16[128]);
            try {
                int i;
                while ((i = text.IndexOf(separator2d)) != -1) {
                    if (i > 0) {
                        ToUInt16Array(text[..i], ref writer1d, separator1d);
                        writer.Write(writer1d.writtenSpan.ToArray());
                    } else {
                        writer.Write(Array.Empty<UInt16>());
                    }
                    writer1d.Clear();
                    text = text[++i..];
                }
                if (text.Length > 0) {
                    ToUInt16Array(text, ref writer1d, separator1d);
                    writer.Write(writer1d.writtenSpan.ToArray());
                } else {
                    writer.Write(Array.Empty<UInt16>());
                }
            } finally {
                writer1d.Dispose();
            }
        }

        public static UInt16[][] ToUInt16Array2D(ReadOnlySpan<char> text, char separator1d = ';', char separator2d = '|') {
            using Writer<UInt16[]> writer = new(128);
            ToUInt16Array2D(text, writer, separator1d, separator2d);
            return writer.writtenSpan.ToArray();
        }

        public static void ToByteArray(ReadOnlySpan<char> text, ref RefWriter<Byte> writer, char separator = ';') {
            int i;
            while ((i = text.IndexOf(separator)) != -1) {
                writer.Write(i > 0 ? Byte.Parse(text[..i]) : default);
                text = text[++i..];
            }
            writer.Write(text.Length > 0 ? Byte.Parse(text) : default);
        }

        public static Byte[] ToByteArray(ReadOnlySpan<char> text, char separator = ';') {
            RefWriter<Byte> writer = new(stackalloc Byte[128]);
            try {
                ToByteArray(text, ref writer, separator);
                return writer.writtenSpan.ToArray();
            } finally {
                writer.Dispose();
            }
        }

        public static void ToByteArray2D(ReadOnlySpan<char> text, IWriter<Byte[]> writer, char separator1d = ';', char separator2d = '|') {
            RefWriter<Byte> writer1d = new(stackalloc Byte[128]);
            try {
                int i;
                while ((i = text.IndexOf(separator2d)) != -1) {
                    if (i > 0) {
                        ToByteArray(text[..i], ref writer1d, separator1d);
                        writer.Write(writer1d.writtenSpan.ToArray());
                    } else {
                        writer.Write(Array.Empty<Byte>());
                    }
                    writer1d.Clear();
                    text = text[++i..];
                }
                if (text.Length > 0) {
                    ToByteArray(text, ref writer1d, separator1d);
                    writer.Write(writer1d.writtenSpan.ToArray());
                } else {
                    writer.Write(Array.Empty<Byte>());
                }
            } finally {
                writer1d.Dispose();
            }
        }

        public static Byte[][] ToByteArray2D(ReadOnlySpan<char> text, char separator1d = ';', char separator2d = '|') {
            using Writer<Byte[]> writer = new(128);
            ToByteArray2D(text, writer, separator1d, separator2d);
            return writer.writtenSpan.ToArray();
        }

        public static void ToSByteArray(ReadOnlySpan<char> text, ref RefWriter<SByte> writer, char separator = ';') {
            int i;
            while ((i = text.IndexOf(separator)) != -1) {
                writer.Write(i > 0 ? SByte.Parse(text[..i]) : default);
                text = text[++i..];
            }
            writer.Write(text.Length > 0 ? SByte.Parse(text) : default);
        }

        public static SByte[] ToSByteArray(ReadOnlySpan<char> text, char separator = ';') {
            RefWriter<SByte> writer = new(stackalloc SByte[128]);
            try {
                ToSByteArray(text, ref writer, separator);
                return writer.writtenSpan.ToArray();
            } finally {
                writer.Dispose();
            }
        }

        public static void ToSByteArray2D(ReadOnlySpan<char> text, IWriter<SByte[]> writer, char separator1d = ';', char separator2d = '|') {
            RefWriter<SByte> writer1d = new(stackalloc SByte[128]);
            try {
                int i;
                while ((i = text.IndexOf(separator2d)) != -1) {
                    if (i > 0) {
                        ToSByteArray(text[..i], ref writer1d, separator1d);
                        writer.Write(writer1d.writtenSpan.ToArray());
                    } else {
                        writer.Write(Array.Empty<SByte>());
                    }
                    writer1d.Clear();
                    text = text[++i..];
                }
                if (text.Length > 0) {
                    ToSByteArray(text, ref writer1d, separator1d);
                    writer.Write(writer1d.writtenSpan.ToArray());
                } else {
                    writer.Write(Array.Empty<SByte>());
                }
            } finally {
                writer1d.Dispose();
            }
        }

        public static SByte[][] ToSByteArray2D(ReadOnlySpan<char> text, char separator1d = ';', char separator2d = '|') {
            using Writer<SByte[]> writer = new(128);
            ToSByteArray2D(text, writer, separator1d, separator2d);
            return writer.writtenSpan.ToArray();
        }

    }
}